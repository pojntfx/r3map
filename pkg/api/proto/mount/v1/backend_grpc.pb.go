// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: backend.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendClient interface {
	ReadAt(ctx context.Context, in *ReadAtArgs, opts ...grpc.CallOption) (*ReadAtReply, error)
	WriteAt(ctx context.Context, in *WriteAtArgs, opts ...grpc.CallOption) (*WriteAtReply, error)
	Sync(ctx context.Context, in *SyncArgs, opts ...grpc.CallOption) (*SyncReply, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) ReadAt(ctx context.Context, in *ReadAtArgs, opts ...grpc.CallOption) (*ReadAtReply, error) {
	out := new(ReadAtReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.mount.v1.Backend/ReadAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) WriteAt(ctx context.Context, in *WriteAtArgs, opts ...grpc.CallOption) (*WriteAtReply, error) {
	out := new(WriteAtReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.mount.v1.Backend/WriteAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) Sync(ctx context.Context, in *SyncArgs, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.mount.v1.Backend/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
// All implementations must embed UnimplementedBackendServer
// for forward compatibility
type BackendServer interface {
	ReadAt(context.Context, *ReadAtArgs) (*ReadAtReply, error)
	WriteAt(context.Context, *WriteAtArgs) (*WriteAtReply, error)
	Sync(context.Context, *SyncArgs) (*SyncReply, error)
	mustEmbedUnimplementedBackendServer()
}

// UnimplementedBackendServer must be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (UnimplementedBackendServer) ReadAt(context.Context, *ReadAtArgs) (*ReadAtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAt not implemented")
}
func (UnimplementedBackendServer) WriteAt(context.Context, *WriteAtArgs) (*WriteAtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteAt not implemented")
}
func (UnimplementedBackendServer) Sync(context.Context, *SyncArgs) (*SyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedBackendServer) mustEmbedUnimplementedBackendServer() {}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_ReadAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAtArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).ReadAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felicitas.r3map.mount.v1.Backend/ReadAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).ReadAt(ctx, req.(*ReadAtArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_WriteAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteAtArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).WriteAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felicitas.r3map.mount.v1.Backend/WriteAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).WriteAt(ctx, req.(*WriteAtArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felicitas.r3map.mount.v1.Backend/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).Sync(ctx, req.(*SyncArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.pojtinger.felicitas.r3map.mount.v1.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAt",
			Handler:    _Backend_ReadAt_Handler,
		},
		{
			MethodName: "WriteAt",
			Handler:    _Backend_WriteAt_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Backend_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.proto",
}
