// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: seeder.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeederClient is the client API for Seeder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeederClient interface {
	ReadAt(ctx context.Context, in *ReadAtArgs, opts ...grpc.CallOption) (*ReadAtReply, error)
	Track(ctx context.Context, in *TrackArgs, opts ...grpc.CallOption) (*TrackReply, error)
	Sync(ctx context.Context, in *SyncArgs, opts ...grpc.CallOption) (*SyncReply, error)
	Close(ctx context.Context, in *CloseArgs, opts ...grpc.CallOption) (*CloseReply, error)
}

type seederClient struct {
	cc grpc.ClientConnInterface
}

func NewSeederClient(cc grpc.ClientConnInterface) SeederClient {
	return &seederClient{cc}
}

func (c *seederClient) ReadAt(ctx context.Context, in *ReadAtArgs, opts ...grpc.CallOption) (*ReadAtReply, error) {
	out := new(ReadAtReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.migration.v1.Seeder/ReadAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seederClient) Track(ctx context.Context, in *TrackArgs, opts ...grpc.CallOption) (*TrackReply, error) {
	out := new(TrackReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.migration.v1.Seeder/Track", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seederClient) Sync(ctx context.Context, in *SyncArgs, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.migration.v1.Seeder/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seederClient) Close(ctx context.Context, in *CloseArgs, opts ...grpc.CallOption) (*CloseReply, error) {
	out := new(CloseReply)
	err := c.cc.Invoke(ctx, "/com.pojtinger.felicitas.r3map.migration.v1.Seeder/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeederServer is the server API for Seeder service.
// All implementations must embed UnimplementedSeederServer
// for forward compatibility
type SeederServer interface {
	ReadAt(context.Context, *ReadAtArgs) (*ReadAtReply, error)
	Track(context.Context, *TrackArgs) (*TrackReply, error)
	Sync(context.Context, *SyncArgs) (*SyncReply, error)
	Close(context.Context, *CloseArgs) (*CloseReply, error)
	mustEmbedUnimplementedSeederServer()
}

// UnimplementedSeederServer must be embedded to have forward compatible implementations.
type UnimplementedSeederServer struct {
}

func (UnimplementedSeederServer) ReadAt(context.Context, *ReadAtArgs) (*ReadAtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAt not implemented")
}
func (UnimplementedSeederServer) Track(context.Context, *TrackArgs) (*TrackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Track not implemented")
}
func (UnimplementedSeederServer) Sync(context.Context, *SyncArgs) (*SyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedSeederServer) Close(context.Context, *CloseArgs) (*CloseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedSeederServer) mustEmbedUnimplementedSeederServer() {}

// UnsafeSeederServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeederServer will
// result in compilation errors.
type UnsafeSeederServer interface {
	mustEmbedUnimplementedSeederServer()
}

func RegisterSeederServer(s grpc.ServiceRegistrar, srv SeederServer) {
	s.RegisterService(&Seeder_ServiceDesc, srv)
}

func _Seeder_ReadAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAtArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeederServer).ReadAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felicitas.r3map.migration.v1.Seeder/ReadAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeederServer).ReadAt(ctx, req.(*ReadAtArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seeder_Track_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeederServer).Track(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felicitas.r3map.migration.v1.Seeder/Track",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeederServer).Track(ctx, req.(*TrackArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seeder_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeederServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felicitas.r3map.migration.v1.Seeder/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeederServer).Sync(ctx, req.(*SyncArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Seeder_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeederServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.pojtinger.felicitas.r3map.migration.v1.Seeder/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeederServer).Close(ctx, req.(*CloseArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Seeder_ServiceDesc is the grpc.ServiceDesc for Seeder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Seeder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.pojtinger.felicitas.r3map.migration.v1.Seeder",
	HandlerType: (*SeederServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAt",
			Handler:    _Seeder_ReadAt_Handler,
		},
		{
			MethodName: "Track",
			Handler:    _Seeder_Track_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Seeder_Sync_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Seeder_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seeder.proto",
}
